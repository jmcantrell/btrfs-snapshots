#!/usr/bin/env bash

# Show that `btrfs-snapshots` forwards the exit status from btrfs.

set -euo pipefail

. "$LIB_DIR"/init.bash
. "$TESTS_LIB_DIR"/init.bash

profile_name=foo
subvolume_dir=$TEMP_DIR/subvolume
snapshots_dir=$TEMP_DIR/snapshots

mkdir -p "$PROFILES_DIR" "$subvolume_dir"

# Create a snapshot so there is a reason for calling btrfs during the prune.
mkdir -p "$snapshots_dir/$TIMESTAMP"

# Omit any limit settings, so everything will be pruned.
printf "%s=%q\n" \
    SUBVOLUME "$subvolume_dir" \
    SNAPSHOTS "$snapshots_dir" \
    >"$PROFILES_DIR/$profile_name.conf"

# Fake implementation of `btrfs` that always errors.
btrfs() {
    return 5
}
export -f btrfs

for action in create prune; do
    stderr="the btrfs command exited with non-zero status code: 5.*"
    stderr+="unable to perform action '$action' for profile: $profile_name"

    assert_failure assert_stderr_match "$stderr" \
        btrfs-snapshots "$action" "$profile_name"
done
