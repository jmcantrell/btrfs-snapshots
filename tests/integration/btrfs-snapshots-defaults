#!/usr/bin/env bash

# Show that default options can be specified in a configuration file.

set -eu

. "$LIB_DIR"/init.sh
. "$TESTS_LIB_DIR"/init.sh

profile_name=foo
profile_dir=$ETC_DIR/profile.d
profile_file=$profile_dir/$profile_name.conf
defaults_file=$ETC_DIR/defaults.conf
subvolume_dir=$TEMP_DIR/subvolume

# There will be no snapshot directory defined in the profile, so it should
# assume this one that will be set in the default configuration file.
snapshots_dir=$TEMP_DIR/snapshots/$profile_name

for event_name in "${EVENT_NAMES[@]}"; do
    reset_temp

    mkdir -p "$subvolume_dir" "$profile_dir"

    # There are no limits defined in the profile, so it should assume these.
    echo "SUBVOLUME=$subvolume_dir" >"$profile_file"

    limit=$((RANDOM % 5 + 1))
    limit_variable=$(get_limit_variable "$event_name")

    echo "SNAPSHOTS=$TEMP_DIR/snapshots/%NAME%" >"$defaults_file"
    echo "$limit_variable=$limit" >>"$defaults_file"

    # Create just enough snapshots to test the limit.
    # If the default limits are not seen, then they will all be pruned, causing
    # the following test to fail.
    while IFS= read -r -d $'\n' event_step; do
        mkdir -p "$snapshots_dir/$event_step"
    done < <(timestamp_sequence_event "$TIMESTAMP" "$event_name" "$limit")

    expected_count=$(get_snapshots "$snapshots_dir" | wc -l)

    # There should be no output, because nothing will be pruned.
    assert_success assert_no_output \
        btrfs-snapshots -p "$profile_name" prune

    # If the default limits were not seen, the snapshot count will be zero.
    assert_equal "$(get_snapshots "$snapshots_dir" | wc -l)" "$expected_count"
done
