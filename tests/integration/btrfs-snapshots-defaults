#!/usr/bin/env bash

# Show that default options can be specified in a configuration file.

set -eu

. "$LIB_DIR"/init.sh
. "$TESTS_LIB_DIR"/init.sh

export BTRFS_SNAPSHOTS_PROFILES_DIR=$TEMP_DIR/profiles.d
export BTRFS_SNAPSHOTS_DEFAULTS_FILE=$TEMP_DIR/defaults.conf

profile_name=foo
profile_file=$BTRFS_SNAPSHOTS_PROFILES_DIR/$profile_name.conf
subvolume=$TEMP_DIR/subvolume
timestamp1=2001-01-01T00:00:00Z

# There will be no snapshot directory defined in the profile, so it should
# assume this default that will be in the main configuration file.
snapshots=$TEMP_DIR/snapshots/$profile_name

for event_name in "${EVENT_NAMES[@]}"; do
    reset_temp

    mkdir -p "$subvolume" "$BTRFS_SNAPSHOTS_PROFILES_DIR"

    # There are no limits defined in the profile, so it should assume the defaults
    # that will be set in the main configuration file.
    echo "SUBVOLUME=$subvolume" >"$profile_file"

    limit=$((RANDOM % 5 + 1))
    limit_variable=$(get_limit_variable "$event_name")

    echo "SNAPSHOTS=$TEMP_DIR/snapshots/%NAME%" >"$BTRFS_SNAPSHOTS_DEFAULTS_FILE"
    echo "$limit_variable=$limit" >>"$BTRFS_SNAPSHOTS_DEFAULTS_FILE"

    # Create just enough snapshots to test the limit.
    # If the default limits are not seen, then they will all be pruned, causing
    # the following test to fail.
    while IFS= read -r -d $'\n' timestamp2; do
        mkdir -p "$snapshots/$timestamp2"
    done < <(timestamp_sequence_event "$timestamp1" "$event_name" "$limit")

    expected_count=$(get_snapshots "$snapshots" | wc -l)

    # There should be no output, because nothing will be pruned.
    assert_success assert_no_output \
        btrfs-snapshots -p "$profile_name" prune

    # If the default limits were not seen, the snapshot count will be zero.
    assert_equal "$(get_snapshots "$snapshots" | wc -l)" "$expected_count"
done
