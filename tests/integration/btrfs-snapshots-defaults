#!/usr/bin/env bash

# Show that `btrfs-snapshots` recognizes a default configuration file.

set -euo pipefail

. "$LIB_DIR"/init.bash
. "$TESTS_LIB_DIR"/init.bash

profile_name=foo
profile_file=$PROFILES_DIR/$profile_name.conf
subvolume_dir=$TEMP_DIR/subvolume

# There will be no snapshot directory defined in the profile, so it should
# assume this one that will be set in the default configuration file.
snapshots_dir=$TEMP_DIR/snapshots/$profile_name

for event_name in "${EVENT_NAMES[@]}"; do
    reset_temp

    mkdir -p "$subvolume_dir" "$PROFILES_DIR"

    printf "%s=%s\n" \
        SUBVOLUME "$subvolume_dir" \
        >"$profile_file"

    limit=$((RANDOM % 5 + 1))

    # There are no limits defined in the profile, so it should use these.
    printf "%s=%s\n" \
        SNAPSHOTS "$TEMP_DIR/snapshots/%s" \
        LIMIT_"${event_name@U}" "$limit" \
        >"$DEFAULTS_FILE"

    # Create just enough snapshots to test the limit.
    # If the default limits are not seen, then they will all be pruned, causing
    # the following test to fail.
    while read -r event_step; do
        mkdir -p "$snapshots_dir/$event_step"
    done < <(timestamp_seq_event "$TIMESTAMP" "$event_name" "$limit")

    expected_count=$(SNAPSHOTS=$snapshots_dir list | wc -l)

    # There should be no output, because nothing will be pruned.
    assert_no_output assert_success \
        btrfs-snapshots --profile="$profile_name" prune

    # If the default limits were not seen, the snapshot count will be zero.
    assert_equal "$(SNAPSHOTS=$snapshots_dir list | wc -l)" "$expected_count"
done
