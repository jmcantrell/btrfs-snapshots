#!/usr/bin/env bash

# Show that `btrfs-snapshots` takes no further action when an error occurs.

set -euo pipefail

. "$LIB_DIR"/init.bash
. "$TESTS_LIB_DIR"/init.bash

profile_dir=$CONFIG_DIR/profile.d

mkdir -p "$profile_dir"

profile_names=(a b c)
subvolume_dirs=()
snapshots_dirs=()
profile_files=()

for profile_name in "${profile_names[@]}"; do
    subvolume_dir=$TEMP_DIR/subvolume/$profile_name
    snapshots_dir=$TEMP_DIR/snapshots/$profile_name
    profile_file=$profile_dir/$profile_name.conf

    subvolume_dirs+=("$subvolume_dir")
    snapshots_dirs+=("$snapshots_dir")
    profile_files+=("$profile_file")

    mkdir -p "$subvolume_dir"

    printf "%s=%s\n" \
        SUBVOLUME "$subvolume_dir" \
        SNAPSHOTS "$snapshots_dir" \
        >"$profile_file"
done

# Any actions that occur before the error are fine.
before=0
printf -v stdout \
    "$TEXT_BTRFS_CREATE\n" \
    "${subvolume_dirs[$before]}" \
    "${snapshots_dirs[$before]}/$TIMESTAMP"

# Sabotage one of the profiles.
target=1
stderr_lines=(
    "$(printf "$TEXT_SOURCE_FAILED" "${profile_files[$target]}")"
    "$(printf "$TEXT_PROFILE_LOAD_FAILED" "${profile_files[$target]}")"
)
printf -v stderr "%s\n" "${stderr_lines[@]}"
printf "return 1\n" >>"${profile_files[$target]}"

assert_output "$stdout" "$stderr" assert_failure \
    btrfs-snapshots create
