#!/usr/bin/env bash

# Show that `prune` will preserve the correct snapshots.

set -euo pipefail

. "$LIB_DIR"/init.bash
. "$TESTS_LIB_DIR"/init.bash

export SUBVOLUME=$TEMP_DIR/subvolume
export SNAPSHOTS=$TEMP_DIR/snapshots

limit=3

for event_name in "${EVENT_NAMES[@]}"; do
    reset_temp

    export "LIMIT_${event_name@U}=$limit"

    keepers=()
    fillers=()

    while read -r event_start; do
        # This snapshot is the earliest one of this event, so it should not be
        # deleted.
        keeper=$SNAPSHOTS/$event_start
        keepers+=("$keeper")

        # Generate a bunch of filler snapshots within the same event that will
        # eventually be deleted.
        while read -r event_step; do
            snapshot=$SNAPSHOTS/$event_step
            mkdir -p "$snapshot"

            # Only predict the message if it's not the keeper.
            if [[ $snapshot != "$keeper" ]]; then
                fillers+=("$snapshot")
            fi
        done < <(timestamp_seq "$event_start" "1 second" "$limit" | tac)
    done < <(timestamp_seq_event "$TIMESTAMP" "$event_name" "$limit" | tac)

    printf -v stdout \
        "$TEXT_BTRFS_DELETE\n" \
        "${fillers[@]}"

    assert_stdout "$stdout" assert_success \
        prune

    assert_equal "$(snapshots "$SNAPSHOTS" | grep -zc .)" "$limit"

    for keeper in "${keepers[@]}"; do
        assert_directory "$keeper"
    done

    for filler in "${fillers[@]}"; do
        assert_no_directory "$filler"
    done
done
