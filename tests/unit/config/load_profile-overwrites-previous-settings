#!/usr/bin/env bash

# Show that `load_profile` overwrites previously loaded settings.

set -euo pipefail

. "$LIB_DIR"/init.bash
. "$TESTS_LIB_DIR"/init.bash

profile_file=$PROFILES_DIR/foo.conf

mkdir -p "$(dirname "$profile_file")"

# Write a profile with no variables set. If existing variables are not
# overwritten, there should be no errors and the value would remain set.
touch "$profile_file"

for variable in SUBVOLUME SNAPSHOTS; do
    # Try to trick the function into accepting a previous value.
    export "$variable=$TEMP_DIR"

    printf -v stderr \
        "$TEXT_PROFILE_VARIABLE_NOT_SET\n" \
        "$profile_file" "$variable"

    # If $variable was not overwritten, this would succeed with no output.
    assert_stderr "$stderr" assert_failure \
        load_profile "$profile_file"

    # If $variable was not overwritten, it would still be set.
    assert_not_set "$variable"

    # Skip over this error for the next test.
    printf "%s=%q\n" \
        "$variable" "$TEMP_DIR" \
        >>"$profile_file"
done

# Try to trick the function into accepting previous values.
for event_name in "${EVENT_NAMES[@]}"; do
    export "LIMIT_${event_name@U}=1"
done

# At this point, the profile is valid, but does not include limits.
assert_no_output assert_success \
    load_profile "$profile_file"

# Ensure existence of, but non-inheritance of limit values.
for event_name in "${EVENT_NAMES[@]}"; do
    variable=LIMIT_${event_name@U}
    assert_equal "${!variable}" 0
done
