#!/usr/bin/env bash

# Show that `load_profile` only succeeds if paths are set and absolute.

set -euo pipefail

. "$LIB_DIR"/init.bash
. "$TESTS_LIB_DIR"/init.bash

profile_file=$PROFILES_DIR/foo.conf
variables=(SUBVOLUME SNAPSHOTS)
profile_lines=()

mkdir -p "$(dirname "$profile_file")"

# For each required variable, ensure `load_profile` fails when the value is:
# - not set or empty
# - not an absolute path

for ((i = 0; i < ${#variables[@]}; i++)); do
    variable=${variables[i]}

    # Write the file without the variable.
    printf "%s\n" "${profile_lines[@]}" >"$profile_file"

    stderr="variable is not set: $variable"

    # Ensure that a missing variable is reported as not set.
    assert_failure assert_stderr_match "$stderr" \
        load_profile "$profile_file"

    # Write the file with the variable's value empty.
    profile_lines+=("$variable=")
    printf "%s\n" "${profile_lines[@]}" >"$profile_file"

    # Ensure that an empty value is also reported as not set.
    assert_failure assert_stderr_match "$stderr" \
        load_profile "$profile_file"

    path=./relative/path

    # Write the file with the variables's value as a relative path.
    profile_lines[-1]=$variable=$path
    printf "%s\n" "${profile_lines[@]}" >"$profile_file"

    stderr="$variable is not an absolute path: $path"

    # Ensure that a relative path is reported as not absolute.
    assert_failure assert_stderr_match "$stderr" \
        load_profile "$profile_file"

    # Set the variable's value to something valid, so it will be written on the
    # next loop iteration, and not trigger an error.
    profile_lines[-1]=$variable=$TEMP_DIR
done
