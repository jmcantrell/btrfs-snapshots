#!/usr/bin/env bash

# Show that `snapshots` will only return existing snapshots with a recognized
# timestamp only at the top level directory and in chronological (natural) order.

set -euo pipefail

. "$LIB_DIR"/init.bash
. "$TESTS_LIB_DIR"/init.bash

assert_snapshots() {
    local directory=$1
    shift

    local actual
    readarray -t actual < <(snapshots "$directory")

    local expected=("$@")

    assert_equal "${#actual[@]}" "${#expected[@]}"

    local i
    for ((i = 0; i < ${#actual[@]}; i++)); do
        assert_equal "${actual[i]}" "${expected[i]}"
    done
}

# Does not complain about non-exsistent directories.
assert_snapshots /path/to/nowhere

# Does not return anything for an empty directory.
assert_snapshots "$TEMP_DIR"

# Does not recognize regular files.
reset_temp
touch "$TEMP_DIR"/test_file
assert_snapshots "$TEMP_DIR"

# Does not recognize non-timestamped directories.
reset_temp
mkdir -p "$TEMP_DIR"/test_dir
assert_snapshots "$TEMP_DIR"

# Does not recognized timestamped regular files.
reset_temp
touch "$TEMP_DIR/$TIMESTAMP"
assert_snapshots "$TEMP_DIR"

# Returns all found snapshots in chronological order.
reset_temp
while read -r timestamp_step; do
    snapshot=$TEMP_DIR/$timestamp_step
    expected+=("$snapshot")
    mkdir -p "$snapshot"
done < <(timestamp_sequence "$TIMESTAMP" hour 24)
assert_snapshots "$TEMP_DIR" "${expected[@]}"

# Does not look more than one level deep.
mkdir -p "$TEMP_DIR/$TIMESTAMP/$TIMESTAMP"
assert_snapshots "$TEMP_DIR" "${expected[@]}"
